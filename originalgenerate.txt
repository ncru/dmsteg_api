@app.route("/generate", methods=["POST"])
def generate():
    if request.method == "POST":
        if not check_files(request):
            return {
                "message": "Invalid inputs",
            }, 406

        file = request.files["file"]
        # file_name = f'temp-{noext_file_name}-original.pdf'
        # file_path = os.path.join(app.config["UPLOAD_FOLDER"], file_name)
        file_path = os.path.join(
            app.config["UPLOAD_FOLDER"], secure_filename(file.filename)
        )
        file.save(file_path)
        document = fitz.open(file_path)

        images = grab_first_page_images(document)
        img_paths = []
        for i, image in enumerate(images):
            img_name = secure_filename(
                f'tempimg-{i}-{document.name[: document.name.find(".pdf")]}.png'
            )
            img_path = os.path.join(app.config["UPLOAD_FOLDER"], img_name)
            img_paths.append(img_path)
            image.save(img_path)

        dm_paths = grab_all_dms(img_paths)
        # if dms in the pdf check if they are 3sys
        if len(dm_paths) > 0:
            valid_dm_path = check_dms_for_steganography(dm_paths)
            if valid_dm_path != False:
                reg_msg = read_dm(valid_dm_path)
                _image = Image.open(valid_dm_path)
                steg_msg = read_steganography(_image)
                return {
                    "message": "The document is already signed",
                }, 400
            else:
                return {
                    "message": "The document may not be valid",
                }, 400
        # if there are no dms then check if the margins are clear
        elif margins_passed(document):
            orig_pdf_data = bytes(document.tobytes())
            with connection:
                with connection.cursor() as cursor:
                    cursor.execute(INSERT_ORIGPDFS_RETURN_ID, (orig_pdf_data,))
                    steg_id = cursor.fetchone()[0]

            ord_dm = generate_dm(document)
            steg_dm = steganography(ord_dm, str(steg_id))
            modified_document = put_steg_dm_in_pdf(document, steg_dm)
            base_name = os.path.basename(modified_document.name)
            new_name = secure_filename(
                f'temp-{base_name[: base_name.find(".pdf")]}-modified.pdf'
            )
            new_path = os.path.join(app.config["UPLOAD_FOLDER"], new_name)
            modified_document.save(new_path)
            metadata = json.dumps(modified_document.metadata)
            new_pdf_data = bytes(modified_document.tobytes())

            with connection:
                with connection.cursor() as cursor:
                    cursor.execute(
                        INSERT_THREESYSPDF_RETURN_ROW, (metadata, new_pdf_data, steg_id)
                    )
                    (
                        rpdf_id,
                        rpdf_metadata,
                        rpdf_data,
                        rorigpdfs_id,
                    ) = cursor.fetchall()[0]
            # send_file(new_path, as_attachment=True)
            rpdf_data_bytes = str(bytes(modified_document.tobytes()))
            modified_document.close()
            os.remove(new_path)
            return {
                "message": "Verified pdf successfully created",
                "pdf_id": rorigpdfs_id,
                "metadata": rpdf_metadata,
                # "pdf_data": rpdf_data_bytes,
            }, 201
        else:
            return {
                "message": "The document must have clear 1 inch margins",
            }, 400
